import junit.framework.TestCase;
import junit.framework.TestSuite;
import org.junit.*;


public class PenTest extends TestCase{
    public PenTest(String testMethodName) {
        super(testMethodName);
    }

    @Test
    public void constructorOneParam_PositiveValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorOneParam_NegativeValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(-1);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorOneParam_NilValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(0);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorTwoParam_SecondPositiveValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10, 10);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorTwoParam_SecondNegativeValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10, -10);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorTwoParam_SecondNilValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10, 0);
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorThreeParam_ThirdEmptyValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10, 0, "");
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void constructorThreeParam_ThirdNotEmptyValue_ExcpetionNotThrow() {
        try {
            Pen pen = new Pen(10, 0, "Color");
        } catch (Exception exception) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void isWork_AcceptedValue_True() {
        Pen pen = new Pen(10);
        assertTrue("Wrong value", pen.isWork());
    }

    @Test
    public void isWork_NegativeValue_False() {
        Pen pen = new Pen(-1);
        assertFalse("Wrong value", pen.isWork());
    }

    @Test
    public void isWork_BorderValue_False() {
        Pen pen = new Pen(0);
        assertFalse("Wrong value", pen.isWork());
    }

    @Test
    public void getColor_NotEmptyValue_NotEmptyValue() {
        Pen pen = new Pen(10, 10, "Color");
        assertEquals("Wrong color", "Color", pen.getColor());
    }

    @Test
    public void getColor_EmptyValue_EmptyValue() {
        Pen pen = new Pen(10, 10, "");
        assertEquals("Wrong color", "", pen.getColor());
    }

    @Test
    public void write_sizeLetterIsNilAndContainerValuePositive_FullWord() {
        Pen pen = new Pen(10, 0);
        assertEquals("Wrong word", "Hello world!", pen.write("Hello world!"));
    }

    @Test
    public void write_sizeLetterIsNilAndContainerValueNegative() {
        Pen pen = new Pen(-10, 0);
        assertEquals("Wrong word", "", pen.write("Hello world!"));
    }

    @Test
    public void write_sizeLetterIsNilAndContainerValueNil() {
        Pen pen = new Pen(0, 0);
        assertEquals("Wrong word", "", pen.write("Hello world!"));
    }

    @Test
    public void write_PositiveValues_FullWord() {
        Pen pen = new Pen(13, 1);
        assertEquals("Wrong word", "Hello world!", pen.write("Hello world!"));
    }

    @Test
    public void write_PositiveValues_PartOfWord() {
        Pen pen = new Pen(10, 1);
        assertEquals("Wrong word", "Hello worl", pen.write("Hello world!"));
    }

    public static TestSuite suite() {
        TestSuite testSuite = new TestSuite();
        testSuite.addTest(new PenTest("constructorOneParam_PositiveValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorOneParam_NegativeValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorOneParam_NilValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorTwoParam_SecondPositiveValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorTwoParam_SecondNegativeValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorTwoParam_SecondNilValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorThreeParam_ThirdEmptyValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("constructorThreeParam_ThirdNotEmptyValue_ExcpetionNotThrow"));
        testSuite.addTest(new PenTest("getColor_NotEmptyValue_NotEmptyValue"));
        testSuite.addTest(new PenTest("getColor_EmptyValue_EmptyValue"));
        testSuite.addTest(new PenTest("isWork_BorderValue_False"));
        testSuite.addTest(new PenTest("isWork_AcceptedValue_True"));
        testSuite.addTest(new PenTest("isWork_NegativeValue_False"));
        testSuite.addTest(new PenTest("write_sizeLetterIsNilAndContainerValuePositive_FullWord"));
        testSuite.addTest(new PenTest("write_sizeLetterIsNilAndContainerValueNegative"));
        testSuite.addTest(new PenTest("write_sizeLetterIsNilAndContainerValueNil"));
        testSuite.addTest(new PenTest("write_PositiveValues_FullWord"));
        testSuite.addTest(new PenTest("write_PositiveValues_PartOfWord"));
        return testSuite;
    }
}
